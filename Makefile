# -----------------------------------------------------------------------------
# Compiler
# -----------------------------------------------------------------------------

CC  = g++

# -----------------------------------------------------------------------------
# Compiler options
# -----------------------------------------------------------------------------

ALL_WARNINGS = -Wall

BOOST_INC_DIR = $(HOME)/boost_1_63_0
# use -isystem instead of -I for this to treat boost files as system headers.
# one use is that warnings generated by these files will be ignored.

CPP_11 = -std=c++11

DEBUG = -g

DEP_FLAGS = -MMD -MP

CC_FLAGS = $(DEBUG) $(ALL_WARNINGS) $(CPP_11) -isystem$(BOOST_INC_DIR) $(DEP_FLAGS)

# -----------------------------------------------------------------------------
# make all: compiles the program.
# make exe: compiles the program and runs exe.
#
# Note: when a dependency is listed for a .o file, the file is rebuilt when it
# is older than any of its dependencies. Hence, although h files are not
# necessary to be listed as dependencies, they are useful to be listed just to
# make sure that the .o file is not older than the .hpp files. Hence, we only
# need to include user-defined headers as dependencies and not standard/boost
# ones like <vector>.
# -----------------------------------------------------------------------------

SRC_DIR = cpp-tests

OBJ_DIR = obj

OBJS = \
	$(OBJ_DIR)/main.o \
	$(OBJ_DIR)/algos.o \
	$(OBJ_DIR)/boost.o \
	$(OBJ_DIR)/pointers.o \
	$(OBJ_DIR)/strings.o

EXEC_NAME = main.out

all: $(OBJS)
	$(CC) $^ -o $(EXEC_NAME)

-include $(OBJS:.o=.d)

$(OBJ_DIR)/%.o: $(SRC_DIR)/%.cpp
	@mkdir -p $(OBJ_DIR)
	$(CC) $(CC_FLAGS) -c $< -o $@
# -o places the output of the gcc operation in the specified file ($@ here).
# If this flag is not specified, the output will simply be placed at the target name (%.o).

exe:
	make all
	./$(EXEC_NAME)

clean:
	rm -rf $(EXEC_NAME) $(OBJ_DIR)
	# rm -f $(EXEC_NAME) *.o *.d
